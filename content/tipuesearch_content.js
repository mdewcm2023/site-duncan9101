var tipuesearch = {"pages": [{'title': 'About', 'text': 'cmsimde_site \n', 'tags': '', 'url': 'About.html'}, {'title': 'W9', 'text': 'new bing 建議採取的程式內容為: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n \n \n \n from   browser  import   html, document \n brython_div  =   document[ "brython_div" ] \n # Example data for five tests \n url1  =   "https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw5.txt" \n url2  =   "https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw6.txt" \n url3  =   "https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw6-2.txt" \n url4  =   "https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/075c06b2baf1bb07665f1a98e9f88f7e81ebe1a4/1aw8.txt" \n url5  =   "https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw9.txt" \n \xa0 \n \'\'\' \n test1 = ["12345:80", "67890:70"] \n test2 = ["12345:85", "67890:75"] \n test3 = ["12345:90", "67890:80"] \n test4 = ["12345:95", "67890:85"] \n test5 = ["12345:100", "67890:90"] \n \'\'\' \n test1  =   open (url1).read().split( "\\n" )[ 1 :] \n test2  =   open (url2).read().split( "\\n" )[ 1 :] \n test3  =   open (url3).read().split( "\\n" )[ 1 :] \n test4  =   open (url4).read().split( "\\n" )[ 1 :] \n test5  =   open (url5).read().split( "\\n" )[ 1 :] \n \xa0 \n \xa0 \n # Create a dictionary to store the student numbers and their test scores \n student_scores  =   {} \n \xa0 \xa0 \n # Iterate over the data for each test \n for   test_data  in   [test1, test2, test3, test4, test5]: \n \xa0\xa0\xa0\xa0 # Iterate over the data for this test \n \xa0\xa0\xa0\xa0 for   item  in   test_data: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # Split the item into its components \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 student_number, score  =   item.split( ":" ) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # Convert the score to an integer \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 try : \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 score  =   int (score) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 except : \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 score  =   0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # Add the score to the list of scores for this student \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   student_number  not   in   student_scores: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 student_scores[student_number]  =   [] \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 student_scores[student_number].append(score) \n \xa0 \xa0 \n # Calculate the average score for each student \n for   student_number, scores  in   student_scores.items(): \n \xa0\xa0\xa0\xa0 average_score  =   int ( sum (scores)  /   len (scores)) \n \xa0\xa0\xa0\xa0 #print(f"Student {student_number} has an average score of {average_score}") \n \xa0\xa0\xa0\xa0 brython_div < =   student_number \n \xa0\xa0\xa0\xa0 brython_div < =   ":" \n \xa0\xa0\xa0\xa0 brython_div < =   average_score \n \xa0\xa0\xa0\xa0 brython_div < =   html.BR() \n \xa0 \n brython_div < =   data \n \n \n \n \n \n \n \n 將上述程式, 在本頁面導入 Brython 環境後, 可以直接執行, 並且將結果以 Brython browser 的 html 模組列在頁面中 \n', 'tags': '', 'url': 'W9.html'}, {'title': 'W13', 'text': '在 stud2 主機上以 wsgi 執行動態網站, 以 nginx serve 靜態網站: \n stud2 主機上的動態與靜態網站 serving.mp4 \xa0 (在無 IPv6 網路協定支援情況下, 利用 Putty 設定代理) \n 以 demo2 為示範帳號, 將 resume-scrum-1 倉儲內容送到 stud2 建立靜態網站.mp4 \n 使用 vi 編輯 server.py 放入各自的 9 字頭埠號後, 就可以用 hupper3 -m server.py 測試.mp4 \n 下載 \xa0 putty 0.78.7z \n 在 stud2 主機建立倉儲的動態系統: \n ssh \xa0 demo2@stud2.cycu.org \xa0登入後, 以 ssh-keygen 在 .ssh 目錄下建立 id_rsa, \xa0 id_rsa.pub \n .ssh/config: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n \n \n \n Host github.com \n User git \n Hostname github.com \n ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n \n \n \n \n \n sftp \xa0 demo2@stud2.cycu.org \xa0登入後, cd .ssh 然後以 put \xa0 config \xa0 將代理主機的設定檔案送到 stud2 帳號下的 .ssh 目錄, 使用 get id_rsa.pub 將公鑰取下, 然後以 SciTE 編輯器打開後, 將公鑰內容送到 Github 帳號下的 settings 中的 SSH and GPG 設定區. \n 完成上述設定後, 以 SSH 協定取下倉儲: \n ssh 登入帳號後, 在所在目錄 /home/帳號/, 以 git clone \xa0 git@github.com:wcm2023 /倉儲名稱.git repo \n cd repo \n 利用以下指令, 將 acp 設為 user 可以執行 (Execute): \n chmod u+x acp \n 以 sftp get 取下 repo 目錄下的 waitress_server.py \n 在 Windows 編輯 waitress_server.py, 之後存為 server.py, 再送回 repo 目錄下. \n 編輯過程在填入個人帳號所配發的 9 字頭的埠號. \n ssh 遠端登入到 repo 目錄下, 執行 hupper3 -m server.py 測試是否已經以 \xa0 https://stud2.cycu.org: 8字頭的埠號. 若可以連結, 必須馬上更改登入密碼 \n', 'tags': '', 'url': 'W13.html'}]};